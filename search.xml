<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[《那些年我们一起学XSS》读书笔记]]></title>
    <url>%2F2019%2F04%2Fxss-naxienian%2F</url>
    <content type="text"><![CDATA[最近在看《那些年我们一起学XSS》，由于每篇文章涉及的关键技巧并不多，在阅读时就想着把关键技巧记录下，以便下次高效查阅。感谢心伤的瘦子，无偿奉献这么好的东西，向你致敬，不知胖了没有。 第一课：什么都没过滤的情况输出点123&lt;HTML 标签&gt;&lt;/HTML 标签&gt;[输出]&lt;HTML 标签&gt;&lt;/HTML 标签&gt; 关键点啥都没过滤，直接x就行： 直接构造&lt;script&gt;evalcode&lt;/script&gt; 构造带监听事件的html标签，例如&lt;img src=1 onerror=evalcode &gt; 防御过滤&lt;&gt;。 第二课：输出在&lt;script&gt;&lt;/script&gt;里面的情况输出点 123&lt;script&gt;[输出]&lt;/script&gt; 关键点 没过滤&lt;&gt;/的话，构造输出xx&lt;/script&gt;&lt;script&gt;eval code&lt;/script&gt;闭合script标签即可。 过滤了&lt;&gt;/的话，直接插入恶意代码，保证代码两头语法正确，不报错即可。例如eval(&#39;alert()&#39;);void(xx)。void含义需理解。void（xx）：执行一个表达式，而不返回值。 防御过滤&lt;&gt;/；定制化过滤。 第三课：输出在html属性里的情况输出点 123&lt;input value="输出"&gt;&lt;img onload="...[输出]..."&gt;&lt;body style="...[输出]..."&gt; 关键点 对于style属性，可尝试css表达式执行js，IE6、7可以。关键代码：expression: eval(xx)。小技巧：css 里，允许使用转义字符\ + ascii16 进制形式。 其他html属性，可利用实体编码特性，对关键字进行实体编码，再进行url编码，实现饶过。例如： 1234&lt;img src="1" onerror="alert()"&gt;和&lt;img src="1" onerror="&amp;#x61;lert()"&gt;是等效的 然后代码转换为 url 编码。 &amp; -&gt; %26, # -&gt; %23 防御过滤\&amp;#;。 第四课：宽字节复仇记输出点1//请求参数的值传给了js里的某个变量，但对值里的双引号"做了过滤，导致无法闭合双引号 关键点页面编码为GB系的前提下，使用%c0闭合双引号。怎样看页面编码：看meta标签 &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=gb18030&quot; /&gt;GBK编码第一字节（高字节）的范围是0x81～0xFE。GB2312是被GBK兼容的，它的高位范围是0xA1～0xF7。 迈萌我举个例子： 12345678//请求参数：gb.php?x=1";alert(1)////直接发送，"被转义：a="1\";alert(1)//";//调整参数：gb.php?x=1%81";alert(1)////最终结果，成功闭合双引号：a="1[%81和\拼接成的新字符]";alert(1)//"; 防御1、赋值前用js检查数据内容，只允许使用字母数字下划线等，其他字符一律过滤；2、用utf-8编码 第五课：反斜线复仇记输出点 输出点还是在js代码里，不同的是，这一课需要同时利用多个技巧。 关键点 反斜线\可以吃掉原代码里的双引号”， //可以注释掉右边的代码 ==的运算优先级比&amp;高 如何避免变量未定义，可控的后边主动声明一个，例如： from==1，from没定义会报错，代码后面加上function from(){}即可。函数声明会被优先解析。 空格被过滤的话，可以用/**/代替。例如： function/**/aa(){} 防御过滤 第六课：换行符复仇记输出点 12345&lt;script&gt;代码段//xx[输出点]xx代码段&lt;/script&gt; 关键点 构造输出点：%0Aalert();//即可，利用换行符开启新的一行。例如： 原请求：a=1，我们构造：a=%0Aalert();//，最终输出如下：123456&lt;script&gt;代码段//xxalert();//xx代码段&lt;/script&gt; alert()触发执行。 防御尽量不要在js注释里输出内容，太危险。 第七课：宽字节、反斜线与换行符一起复仇记输出点 123456//双引号已过滤&lt;input value="[输出点]" &gt;&lt;script&gt;//a="[输出点]";var b="[输出点]";&lt;/script&gt; 关键点 1、换行符可以分割注释。2、js里字符串的值运行多行书写，用\分割。3、\被过滤，要试试能不能用宽字节饶过。 防御参考前面的修复办法。 第八课：Dom XSS入门 [显式输出]输出点 1234567//双引号已过滤&lt;div id="div1"&gt;aaa&lt;/div&gt; &lt;script&gt; var a="[输出点]"; document.getElementById("div1").innerHTML=a; &lt;/script&gt;&lt;/script&gt; 关键点 1、js字符串用unicode字符表示：例如&lt;用\u003c，&gt;用\u003e表示，空格用\u0020表示。2、js字符串用十六进制字符表示：例如&lt;用\x3c，&gt;用\x3e表示。防御参考前面的修复办法。 第九课：Dom XSS入门 [隐式输出]输出点 123456//请求：?name=xx&lt;div id="div1"&gt;&lt;/div&gt; &lt;script&gt; var a=getParam("name"); document.getElementById("div1").innerHTML=a; &lt;/script&gt; 关键点 1、请求参数做了赋值，在js里搜索请求参数即可。 2、decodeURICompent() 防御过滤。 第十课：Dom XSS进阶 [邂逅eval]输出点 1234//请求：?name=xx&lt;script&gt; eval(getParam('name'));&lt;/script&gt; 关键点 1、可控参数传入了eval函数； 2、小技巧：在可控参数加入\等特殊字符，看js是否报错，快速定位到相关代码； 请求：http://kf.qq.com/search_app.shtml?key;alert(1);//=aaaa12eval('this.key="aaaa";');eval('this.key;alert(1);//="aaaa";'); 成功触发alert执行。 防御过滤。 第十一课：DOM XSS进阶[善变iframe]输出点 1&lt;iframe src="xxx"&gt;&lt;/iframe&gt; 关键点iframe的src属性：123456//javascript:&lt;iframe src="javascript:alert(1)"&gt;&lt;/iframe&gt;//vbscript:&lt;iframe src="vbscript:msgbox(1)"&gt;&lt;/iframe&gt;//data协议：&lt;iframe src="data:text/html,&lt;script&gt;alert(1)&lt;/script&gt;"&gt;&lt;/iframe&gt; Chrome iframe的srcdoc属性（IE不支持）：1&lt;iframe srcdoc="&lt;script&gt;alert(1)&lt;/script&gt;"&gt;&lt;/iframe&gt; 防御src属性里，除了过滤jasvascipt关键字，还要过滤vbscript、data等关键字。]]></content>
      <categories>
        <category>web安全</category>
        <category>xss</category>
      </categories>
      <tags>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一次小小的实战：利用html实体转义特性XSS]]></title>
    <url>%2F2019%2F04%2Fxss-html-entity%2F</url>
    <content type="text"><![CDATA[背景今天在看《那些年我们一起学XSS》，文中提到html属性中遇到实体字符，会自动对其转义。怎样利用这个特性进行xss呢？显然，最典型的情况是在onxxx事件中如果过滤了一些敏感字符，我们对这些敏感字符进行实体编码，再发送，顺利的话就可以xss了。 实战于是想找个开源系统实战加深下印象，这一找还真被我逮到一个：）。某系统，搜索功能如下，我们看看这里能不能X： 右键查看源码： 我们先试试在后面加上&quot;&gt;&lt;script&gt;&lt;/script&gt;，会不会过滤: 经过一一确认，发现系统遇到&lt;script&gt;标签就会被干掉。。。 再试试第二种方法，19276&quot; onclick=&quot;alert()&quot;&gt;，看看结果：悲催，又被过滤了，经过确认，onclick、alert关键词都会过滤，常见的onxx事件都被过滤了。随便写个不存在的事件19276&quot; oncleeeick=&quot;aleeert()&quot;&gt;，虽然被chrome拦截了，但至少系统不拦截了，看来还是有希望的，如下： 下一步希望能找到一个冷门dom事件，不在黑名单里的，经过一番尝试，还真找到一个不会过滤的，onwheel事件，官方说明： onwheel：该事件在鼠标滚轮在元素上下滚动时触发。 onwheel没过滤，如下： 喜出望外啊，赶紧弹个窗先： 关键点我去。。。又被过滤了，怎么破？想起刚刚看过的html实体编码转义特性，把alert实体编码试试。a的十六进制是61，实体编码就是&amp;#x61;。然后拼接就可以了吗？肯定是不行的，因为url中遇到&amp;就截断参数了，&amp;#x61;中恰好有&amp;，为了避免干扰，迈萌我要继续对&amp;#x61;进行url编码，推荐web2hack.org/xssee/ 编码，真的好用，&amp;#x61;url编码后为%26%23x61%3B。最终构造的payload如下： 1k=19276"+onwheel="%26%23x61%3Blert(/xss/)"&gt; 我们在火狐中实验，鼠标移到搜索框滚动页面，成功触发xss：]]></content>
      <categories>
        <category>web安全</category>
        <category>xss</category>
      </categories>
      <tags>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac下删除文件无法移入废纸篓的解决办法]]></title>
    <url>%2F2019%2F04%2Fmac-trash%2F</url>
    <content type="text"><![CDATA[有时mac下删除文件突然无法移入到废纸篓，删除文件时只弹出一个提示”您确定要删除xx文件吗？”，确定就直接删除，不进入废纸篓，如何恢复删除到废纸篓呢，解决办法很简单： cd ～ rm .Trash 注销账户，重新登陆，会发现～目录下多了一个”废纸篓”文件夹 搞定。]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[区块链域名解析服务emerdns学习笔记]]></title>
    <url>%2F2019%2F04%2Femerdns%2F</url>
    <content type="text"><![CDATA[前段时间看360netlab的一篇文章基于区块链DNS的Fbot蠕虫，文中提到的Fbot蠕虫，其C2用到了区块链域名解析服务emerDNS，觉得挺有意思，一直念念不忘，最近抽出空来，初步学习下。 emerCoin简介emerCoin是一个区块链项目，提供多个分布式服务，比如分布式域名解析emerDNS、分布式密钥管理emerSSH、分布式证书管理emerSSL等。要使用emerDNS，首先要有钱包，还要充一点币，下面具体介绍。 安装emerCoin钱包首先到官网下载emerCoin钱包，下载地址点这里。下载钱包后，按照提示安装，第一次打开需要同步区块数据，数据量不大，大概几十分钟就可同步完毕，我这里安装的是mac版，最终打开后的界面是这样： 然后你需要为自己充一些emerCoin币，可以从以下交易所充值：我选的是hitbtc交易所，购买emerCoin币后，将其提现到自己的钱包，具体流程和转账比特币类似，具体不细说了。现在我们的钱包有了一些emerCoin币，点击钱包的Manage Names栏目，我们能看到DNS设置按钮，如下： 在具体设置之前，我们先看下emerDNS介绍。 emerDNS简介什么是emerDNS？简单说就是把域名解析过程放在区块链上进行。有啥好处呢？按照官方的说法是这样： 你是否担心自己的网站某一天被关停？随着全球管控力度的加强，这种担心不无道理。EmerDNS可免除这一烦恼。EmerDNS完全去中心化，不受任何管控影响。没有人可以修改你的记录，只有记录创建者才能操作记录内容。在多个浏览器扩展的帮助下，通过OpenNIC服务器或代理可轻松解析EmerDNS网站。 EmerDNS是一个去中心化的域名系统，支持各种DNS记录。EmerDNS在Emercoin NVS中的服务缩写”dns”下运行。 上面提到的NVS是什么？全称是Name Value System，就是一个键值对数据库，写过代码的肯定都知道。到这你可能猜出来了，name里存储域名，value里存储解析记录。我们看下一个典型的emerDNS记录格式。先打开emercoin NVS区块浏览器，地址如下：https://explorer.emercoin.com/nvs type框里输入dns，点击搜索，典型的dns记录格式如下： 我们再回来看看钱包里怎么设置dns，点击dns按钮，弹出子窗口，填写dns name和对应记录即可，这里我添加的A记录94.23.252.190是namecoin官网的地址，如下： 点击OK，回到主界面，我们能看到键值操作有NAME_NEW、NAME_UPDATE、NAME_DELETE三种，这里我们是新增一条A记录，选默认的NAME_NEW即可，点击submit，就会把记录提交到区块链网络中，需要一段时间同步，耐心等会，如下： 我们在回到nvs浏览器看下，果然，有记录了，如下：下面我们看看解析emerdns有哪些方式。 解析emerDNS的五种方式使用OpenNIC DNS使用openNIC DNS服务，这应该是最方便的方式了，把本机DNS设成openNIC的dns地址，即可访问各种非标准域名。迈萌我整理了下，openNIC支持解析的非标准域名有.bit、.coin、.lib、.emc等。 openNIC 所有dns 地址见servers.opennic.org，从中抽取一个，设置本机dns为176.126.70.119，然后用浏览器访问我们前面设置的emerDNS域名magicming.lib，果然跳转到namecoin的官网，为优秀的自己点个赞，如下： 使用dig命令也可以用下面命令dig一下，通过应答的A记录能看出确实是前面设置的ip， 1dig @176.126.70.119 magicking.lib 应答如下： 使用浏览器插件访问peername，下载对应浏览器插件，我下载的是chrome版，安装后浏览器右上角多了一个地球图标，注意该插件和代理类插件冲突，顺利话就可以访问http://magicming.lib 了，如下： 使用钱包内置的控制台进入emerCoin钱包，打开 菜单—&gt; 帮助—&gt; 调试窗口—&gt; 控制台，输入help可查看所有命令，dns相关命令如下：1234name_show [name] [valuetype] [filepath]name_new &lt;name&gt; &lt;value&gt; &lt;days&gt; [toaddress] [valuetype]name_update &lt;name&gt; &lt;value&gt; &lt;days&gt; [toaddress] [valuetype]name_delete &lt;name&gt; 这里我们使用name_show命令查看magicming.lib的dns解析记录，命令如下：1name_show dns:magicming.lib 返回记录如下，我们成功读取了A记录： 使用emercoin命令行emerCoin官网提供了emercoin 命令行，支持ubuntu、debian、centos，下载地址点这里。迈萌我这里以ubuntu16为例，安装步骤如下： 123$ apt-key adv --keyserver keyserver.ubuntu.com --recv B58C58F4$ add-apt-repository 'deb http://download.emercoin.com/ubuntu xenial emercoin'$ apt update &amp;&amp; apt -y install emercoin 安装完毕后首先启动对应服务，命令如下：1service emercoind start 然后服务在后台开始自动同步区块，同步期间试了下不能读取NVS。同步完成后，执行以下命令即可解析域名： 1emc name_show dns:magicming.lib 病毒爱上emerDNS的理由对比传统域名解析，我们能感受到emerDNS有以下优势： 传统情报库不一定会收录这类非标准域名 emerDNS去中心化，无法通过ICANN成员单位来sinkhole该域名 emerDNS更健壮，更具有所有权 增大安全人员分析难度 可以预测也正在发生，基于区块链的各种技术，会越来越多的用在传统黑产中。 怎样防御emerDNS仅从监测感知层面来说，可以在情报库中加入以下数据，增强感知力： 各种非标准域名后缀 可疑非标准域名对应的ip openNIC DNS列表（用这个NDS的不是极客就是黑产） …… 直接干掉emerDNS，目前没什么好想法。]]></content>
      <categories>
        <category>区块链安全</category>
      </categories>
      <tags>
        <tag>emerdns</tag>
        <tag>emercoin</tag>
        <tag>区块链DNS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[隐私保护工具收集]]></title>
    <url>%2F2019%2F04%2Fprivacy-tools%2F</url>
    <content type="text"><![CDATA[本文用于记录一些自己不熟悉的隐私保护工具，抽空研究，不定期更新。 网盘upload.ee anonfiles.com 图床thyrsi.com]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>隐私保护工具</tag>
      </tags>
  </entry>
</search>
